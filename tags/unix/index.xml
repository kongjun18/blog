<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>UNIX - 标签 - 孔俊的知识库</title><link>/tags/unix/</link><description>UNIX - 标签 - 孔俊的知识库</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Mon, 21 Nov 2022 17:42:25 +0800</lastBuildDate><atom:link href="/tags/unix/" rel="self" type="application/rss+xml"/><item><title>深入剖析 Go 语言运行时：IO 轮询器</title><link>/posts/2022/11/21/</link><pubDate>Mon, 21 Nov 2022 17:42:25 +0800</pubDate><author>作者</author><guid>/posts/2022/11/21/</guid><description><![CDATA[netpoller 概述 考虑一个基于 goroutine-per-connection 模型的 TCP echo server： import ( &#34;fmt&#34; &#34;io&#34; &#34;log&#34; &#34;net&#34; ) func worker(conn net.Conn) { defer conn.Close() b := make([]byte, 512) for { size, err := conn.Read(b) if err == io.EOF { break } if err != nil { log.Fatal(err) } size, err = conn.Write(b[0:size]) if err != nil { log.Fatal(err) } } } func main() { listner, err := net.Listen(&#34;tcp&#34;, &#34;127.0.0.1:8080&#34;) if err != nil { log.Fatal(err) } for { conn, err := listner.Accept() if err != nil { log.Fatal(err) } go worker(conn) } } 从用户侧看，系统该调用阻塞 goroutine，Go scheduler 调度其他 goroutine。问题在于，goroutine 复用在线程上，如果 IO 系统调用（如read(2]]></description></item><item><title>UNIX 进程关系</title><link>/posts/2021/04/28/</link><pubDate>Wed, 28 Apr 2021 15:16:23 +0800</pubDate><author>作者</author><guid>/posts/2021/04/28/</guid><description>UNIX是分时系统，同时运行着多个进程，进程之间相互联系，形成了进程组、会话等进程关系，这些进程关系会影响某些函数/系统调用和信号的行为。 进程的起源 所有的进程都有一共同的起源，加电开机启动操作系统并登录（获取login shell）就是用户进程的起始1。这里介绍传统的UNIX登录机制。 UNIX登录的过程一般分为两种： 终端登录（terminal login） 网络登</description></item></channel></rss>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Computer Architecture - 标签 - 孔俊的知识库</title><link>/tags/computer-architecture/</link><description>Computer Architecture - 标签 - 孔俊的知识库</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Thu, 03 Nov 2022 11:00:56 +0800</lastBuildDate><atom:link href="/tags/computer-architecture/" rel="self" type="application/rss+xml"/><item><title>【译】内存屏障：软件黑客的硬件视角</title><link>/posts/2022/11/03/</link><pubDate>Thu, 03 Nov 2022 11:00:56 +0800</pubDate><author>作者</author><guid>/posts/2022/11/03/</guid><description>译者序 Memory Barriers: a Hardware View for Software Hackers 是并发编程专家 Paul E. McKenney 的经典论文，该论文同时收录在他的著作 Is Parallel Programming Hard, And, If So, What Can You Do About It? 附录 C Why Memory Barriers? 中。 本文全文翻译该论文。 为什么中了邪的 CPU 设计者要让可怜的一无所知的软件设计者受内存屏障（memory barrier）的伤害？ 简单地说，因为乱序内存引用可以带来更好的性能，所以需要用内存屏障在同步原语这类其正确操作依赖于排序的内存引用的东西中强制</description></item><item><title>【译】 如何设计正确运行多进程程序的多核计算机</title><link>/posts/2022/10/09/</link><pubDate>Sun, 09 Oct 2022 15:24:14 +0800</pubDate><author>作者</author><guid>/posts/2022/10/09/</guid><description>TL;DR SC(Sequential Consistency)：任何执行的结果看起来就像所有处理器都顺序执行，并且单个处理器按照程序指定次序执行。 每个处理器都是顺序的，不意味着整个多核系统是顺序一致的。 SC 是一个定义在内存访问上的偏序。 为了实现 SC，处理器需要满足两个条件： 处理器按照程序次序发起请求。发起请求包括进入内存模块的队列。 内存模块按照 FIFO 次序响应请求。 SC 虽然符合人类直觉，但限制了处理器</description></item></channel></rss>